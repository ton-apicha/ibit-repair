# üß™ Test Execution Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iBit Repair System

Write-Host "üöÄ Starting iBit Repair System Test Suite" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Yellow

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Services
Write-Host "`nüìä Checking Services..." -ForegroundColor Cyan

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Backend
$backendPort = netstat -ano | findstr :4000
if ($backendPort) {
    Write-Host "‚úÖ Backend Server: Running on port 4000" -ForegroundColor Green
} else {
    Write-Host "‚ùå Backend Server: Not running" -ForegroundColor Red
    Write-Host "Starting Backend Server..." -ForegroundColor Yellow
    Start-Process powershell -ArgumentList "-Command", "cd 'D:\VSCode\ibit-repair\backend'; npm run dev" -WindowStyle Minimized
    Start-Sleep -Seconds 5
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Frontend
$frontendPort = netstat -ano | findstr :3000
if ($frontendPort) {
    Write-Host "‚úÖ Frontend Server: Running on port 3000" -ForegroundColor Green
} else {
    Write-Host "‚ùå Frontend Server: Not running" -ForegroundColor Red
    Write-Host "Starting Frontend Server..." -ForegroundColor Yellow
    Start-Process powershell -ArgumentList "-Command", "cd 'D:\VSCode\ibit-repair\frontend'; npm run dev" -WindowStyle Minimized
    Start-Sleep -Seconds 5
}

# 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend Health
Write-Host "`nüîç Testing Backend Health..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:4000/health" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend Health: OK" -ForegroundColor Green
        $healthData = $response.Content | ConvertFrom-Json
        Write-Host "   Status: $($healthData.status)" -ForegroundColor White
        Write-Host "   Message: $($healthData.message)" -ForegroundColor White
    } else {
        Write-Host "‚ùå Backend Health: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Backend Health: Connection failed" -ForegroundColor Red
    Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend
Write-Host "`nüîç Testing Frontend..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend: Accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Frontend: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Frontend: Connection failed" -ForegroundColor Red
    Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Login API
Write-Host "`nüîê Testing Login API..." -ForegroundColor Cyan

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Admin Login
try {
    $loginData = @{
        username = "admin"
        password = "admin123"
    } | ConvertTo-Json

    $response = Invoke-WebRequest -Uri "http://localhost:4000/api/auth/login" -Method POST -Body $loginData -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
    
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Admin Login: Success" -ForegroundColor Green
        $loginResult = $response.Content | ConvertFrom-Json
        $adminToken = $loginResult.token
        Write-Host "   Token: $($adminToken.Substring(0, 20))..." -ForegroundColor White
    } else {
        Write-Host "‚ùå Admin Login: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Admin Login: Connection failed" -ForegroundColor Red
    Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
}

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Technician Login
try {
    $loginData = @{
        username = "technician1"
        password = "tech123"
    } | ConvertTo-Json

    $response = Invoke-WebRequest -Uri "http://localhost:4000/api/auth/login" -Method POST -Body $loginData -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
    
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Technician Login: Success" -ForegroundColor Green
        $loginResult = $response.Content | ConvertFrom-Json
        $techToken = $loginResult.token
        Write-Host "   Token: $($techToken.Substring(0, 20))..." -ForegroundColor White
    } else {
        Write-Host "‚ùå Technician Login: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Technician Login: Connection failed" -ForegroundColor Red
    Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Invalid Login
try {
    $loginData = @{
        username = "invaliduser"
        password = "invalidpass"
    } | ConvertTo-Json

    $response = Invoke-WebRequest -Uri "http://localhost:4000/api/auth/login" -Method POST -Body $loginData -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
    
    Write-Host "‚ùå Invalid Login: Should have failed but succeeded" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Invalid Login: Correctly rejected" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Invalid Login: Unexpected error (Status: $($_.Exception.Response.StatusCode))" -ForegroundColor Red
    }
}

# 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Brands API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token)
if ($adminToken) {
    Write-Host "`nüè∑Ô∏è Testing Brands API..." -ForegroundColor Cyan
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Get Brands
    try {
        $headers = @{
            "Authorization" = "Bearer $adminToken"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:4000/api/brands" -Headers $headers -UseBasicParsing -TimeoutSec 5
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Get Brands: Success" -ForegroundColor Green
            $brands = $response.Content | ConvertFrom-Json
            Write-Host "   Found $($brands.Count) brands" -ForegroundColor White
        } else {
            Write-Host "‚ùå Get Brands: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Get Brands: Connection failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Models API
if ($adminToken) {
    Write-Host "`nüîß Testing Models API..." -ForegroundColor Cyan
    
    try {
        $headers = @{
            "Authorization" = "Bearer $adminToken"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:4000/api/models" -Headers $headers -UseBasicParsing -TimeoutSec 5
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Get Models: Success" -ForegroundColor Green
            $models = $response.Content | ConvertFrom-Json
            Write-Host "   Found $($models.Count) models" -ForegroundColor White
        } else {
            Write-Host "‚ùå Get Models: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Get Models: Connection failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Parts API
if ($adminToken) {
    Write-Host "`nüî© Testing Parts API..." -ForegroundColor Cyan
    
    try {
        $headers = @{
            "Authorization" = "Bearer $adminToken"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:4000/api/parts" -Headers $headers -UseBasicParsing -TimeoutSec 5
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Get Parts: Success" -ForegroundColor Green
            $parts = $response.Content | ConvertFrom-Json
            Write-Host "   Found $($parts.Count) parts" -ForegroundColor White
        } else {
            Write-Host "‚ùå Get Parts: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Get Parts: Connection failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Customers API
if ($adminToken) {
    Write-Host "`nüë• Testing Customers API..." -ForegroundColor Cyan
    
    try {
        $headers = @{
            "Authorization" = "Bearer $adminToken"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:4000/api/customers" -Headers $headers -UseBasicParsing -TimeoutSec 5
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Get Customers: Success" -ForegroundColor Green
            $customers = $response.Content | ConvertFrom-Json
            Write-Host "   Found $($customers.Count) customers" -ForegroundColor White
        } else {
            Write-Host "‚ùå Get Customers: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Get Customers: Connection failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 10. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Warranty API
if ($adminToken) {
    Write-Host "`nüõ°Ô∏è Testing Warranty API..." -ForegroundColor Cyan
    
    try {
        $headers = @{
            "Authorization" = "Bearer $adminToken"
        }
        
        $response = Invoke-WebRequest -Uri "http://localhost:4000/api/warranties" -Headers $headers -UseBasicParsing -TimeoutSec 5
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Get Warranties: Success" -ForegroundColor Green
            $warranties = $response.Content | ConvertFrom-Json
            Write-Host "   Found $($warranties.Count) warranties" -ForegroundColor White
        } else {
            Write-Host "‚ùå Get Warranties: Failed (Status: $($response.StatusCode))" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Get Warranties: Connection failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 11. Summary
Write-Host "`n" + "=" * 50 -ForegroundColor Yellow
Write-Host "üìä Test Summary" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Yellow

Write-Host "`nüåê System URLs:" -ForegroundColor Cyan
Write-Host "   Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "   Backend:  http://localhost:4000" -ForegroundColor White
Write-Host "   Mobile:   http://192.169.0.67:3000" -ForegroundColor White

Write-Host "`nüîë Test Credentials:" -ForegroundColor Cyan
Write-Host "   Admin:      admin / admin123" -ForegroundColor White
Write-Host "   Technician: technician1 / tech123" -ForegroundColor White

Write-Host "`nüìã Next Steps:" -ForegroundColor Cyan
Write-Host "   1. ‡πÄ‡∏õ‡∏¥‡∏î Browser ‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:3000" -ForegroundColor White
Write-Host "   2. Login ‡∏î‡πâ‡∏ß‡∏¢ admin / admin123" -ForegroundColor White
Write-Host "   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏° Manual Testing Guide" -ForegroundColor White
Write-Host "   4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà http://192.169.0.67:3000" -ForegroundColor White

Write-Host "`nüìö Documentation:" -ForegroundColor Cyan
Write-Host "   - TEST-SUITE.md: Complete test plan" -ForegroundColor White
Write-Host "   - MANUAL-TESTING-GUIDE.md: Step-by-step testing" -ForegroundColor White
Write-Host "   - test-automation.js: Automated API tests" -ForegroundColor White

Write-Host "`n‚úÖ Test execution completed!" -ForegroundColor Green
Write-Host "Press any key to continue..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
