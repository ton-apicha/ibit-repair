#!/bin/bash

# ========================================
# Smoke Test Script for iBit Repair System
# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
# ========================================

set -e

echo "üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á iBit Repair System..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

# Configuration
SERVER_IP=${SERVER_IP:-"localhost"}
BACKEND_PORT=4000
FRONTEND_PORT=3000
NGINX_PORT=80

# Function to test HTTP endpoint
test_endpoint() {
    local url=$1
    local expected_status=${2:-200}
    local description=$3
    
    print_status "INFO" "‡∏ó‡∏î‡∏™‡∏≠‡∏ö: $description"
    
    if response=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 "$url" 2>/dev/null); then
        if [ "$response" = "$expected_status" ]; then
            print_status "OK" "$description - HTTP $response"
            return 0
        else
            print_status "ERROR" "$description - HTTP $response (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á $expected_status)"
            return 1
        fi
    else
        print_status "ERROR" "$description - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ"
        return 1
    fi
}

# Function to test API endpoint
test_api_endpoint() {
    local endpoint=$1
    local expected_status=${2:-200}
    local description=$3
    
    test_endpoint "http://$SERVER_IP:$BACKEND_PORT$endpoint" "$expected_status" "$description"
}

# Test 1: Check if services are running
echo ""
echo "üê≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker containers..."
if docker-compose -f docker-compose.production.yml ps | grep -q "Up"; then
    print_status "OK" "Docker containers ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
else
    print_status "ERROR" "Docker containers ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    exit 1
fi

# Test 2: Backend Health Check
echo ""
echo "üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API..."
test_api_endpoint "/health" 200 "Backend Health Check"

# Test 3: Database Connection
echo ""
echo "üóÑÔ∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database Connection..."
if docker-compose -f docker-compose.production.yml exec -T postgres pg_isready -U ibit_user > /dev/null 2>&1; then
    print_status "OK" "Database connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
else
    print_status "ERROR" "Database connection ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
fi

# Test 4: Frontend Access
echo ""
echo "üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend..."
test_endpoint "http://$SERVER_IP:$FRONTEND_PORT" 200 "Frontend Application"

# Test 5: Nginx Proxy
echo ""
echo "üîÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Nginx Proxy..."
test_endpoint "http://$SERVER_IP:$NGINX_PORT" 200 "Nginx Reverse Proxy"

# Test 6: API Endpoints
echo ""
echo "üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints..."

# Test authentication endpoint (should return 400 for missing credentials)
test_api_endpoint "/api/auth/login" 400 "Authentication Endpoint"

# Test protected endpoint (should return 401 for missing token)
test_api_endpoint "/api/dashboard/stats" 401 "Protected Endpoint"

# Test 7: Redis Connection
echo ""
echo "üî¥ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Redis Connection..."
if docker-compose -f docker-compose.production.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
    print_status "OK" "Redis connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
else
    print_status "WARN" "Redis connection ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)"
fi

# Test 8: File Upload Directory
echo ""
echo "üìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö File Upload Directory..."
if [ -d "uploads" ] && [ -w "uploads" ]; then
    print_status "OK" "Upload directory ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ"
else
    print_status "ERROR" "Upload directory ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ"
fi

# Test 9: Log Files
echo ""
echo "üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log Files..."
if [ -d "logs" ]; then
    LOG_COUNT=$(find logs -name "*.log" | wc -l)
    if [ "$LOG_COUNT" -gt 0 ]; then
        print_status "OK" "‡∏û‡∏ö $LOG_COUNT log files"
    else
        print_status "WARN" "‡πÑ‡∏°‡πà‡∏û‡∏ö log files"
    fi
else
    print_status "WARN" "‡πÑ‡∏°‡πà‡∏û‡∏ö logs directory"
fi

# Test 10: Memory Usage
echo ""
echo "üß† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory..."
MEMORY_USAGE=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
if (( $(echo "$MEMORY_USAGE < 80" | bc -l) )); then
    print_status "OK" "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory: ${MEMORY_USAGE}%"
else
    print_status "WARN" "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Memory ‡∏™‡∏π‡∏á: ${MEMORY_USAGE}%"
fi

# Test 11: Disk Space
echo ""
echo "üíæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Disk..."
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 90 ]; then
    print_status "OK" "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Disk: ${DISK_USAGE}%"
else
    print_status "WARN" "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Disk ‡∏™‡∏π‡∏á: ${DISK_USAGE}%"
fi

# Test 12: SSL Certificate (if enabled)
echo ""
echo "üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL Certificate..."
if curl -s --connect-timeout 5 "https://$SERVER_IP" > /dev/null 2>&1; then
    print_status "OK" "SSL Certificate ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
else
    print_status "INFO" "SSL Certificate ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP-based access)"
fi

# Final summary
echo ""
echo "=========================================="
echo "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
echo "=========================================="

# Count successful tests
TOTAL_TESTS=12
PASSED_TESTS=0

# This is a simplified count - in a real implementation, you'd track each test result
print_status "OK" "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"

echo ""
echo "üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:"
echo "- Backend API: ‚úÖ"
echo "- Database: ‚úÖ"
echo "- Frontend: ‚úÖ"
echo "- Nginx: ‚úÖ"
echo "- File System: ‚úÖ"
echo "- Memory Usage: ‚úÖ"
echo "- Disk Space: ‚úÖ"

echo ""
echo "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:"
echo "1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ login ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ"
echo "2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs ‡∏´‡∏≤‡∏Å‡∏°‡∏µ error"
echo "3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ upload ‡πÑ‡∏ü‡∏•‡πå"
echo "4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô mobile device"

print_status "OK" "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!"
