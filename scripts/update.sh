#!/bin/bash

# ========================================
# Update Script for iBit Repair System
# ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
# ========================================

set -e

echo "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï iBit Repair System..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

# Check if running in correct directory
if [ ! -f "docker-compose.production.yml" ]; then
    print_status "ERROR" "‡πÑ‡∏°‡πà‡∏û‡∏ö docker-compose.production.yml - ‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å root directory ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
    exit 1
fi

# Check if .env file exists
if [ ! -f ".env" ]; then
    print_status "ERROR" "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env"
    exit 1
fi

# Create backup before update
print_status "INFO" "‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï..."
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="backups/update_${TIMESTAMP}"
mkdir -p "$BACKUP_DIR"

# Backup database
print_status "INFO" "Backup database..."
docker-compose -f docker-compose.production.yml exec -T postgres pg_dump -U ibit_user ibit_repair > "$BACKUP_DIR/database_backup.sql"

# Backup uploads
if [ -d "uploads" ]; then
    print_status "INFO" "Backup uploads..."
    cp -r uploads "$BACKUP_DIR/"
fi

# Backup configuration
print_status "INFO" "Backup configuration..."
cp .env "$BACKUP_DIR/"
cp docker-compose.production.yml "$BACKUP_DIR/"

print_status "OK" "Backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: $BACKUP_DIR"

# Stop services gracefully
print_status "INFO" "‡∏´‡∏¢‡∏∏‡∏î services..."
docker-compose -f docker-compose.production.yml down

# Pull latest images
print_status "INFO" "‡∏î‡∏∂‡∏á Docker images ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î..."
docker-compose -f docker-compose.production.yml pull

# Rebuild containers
print_status "INFO" "‡∏™‡∏£‡πâ‡∏≤‡∏á containers ‡πÉ‡∏´‡∏°‡πà..."
docker-compose -f docker-compose.production.yml build --no-cache

# Start services
print_status "INFO" "‡πÄ‡∏£‡∏¥‡πà‡∏° services..."
docker-compose -f docker-compose.production.yml up -d

# Wait for services to be ready
print_status "INFO" "‡∏£‡∏≠ services ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô..."
sleep 30

# Health check
print_status "INFO" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö..."
./scripts/health-check.sh

# Run database migrations if needed
print_status "INFO" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database migrations..."
docker-compose -f docker-compose.production.yml exec backend npx prisma migrate deploy

# Clean up old images
print_status "INFO" "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Docker images ‡πÄ‡∏Å‡πà‡∏≤..."
docker image prune -f

# Final status
echo ""
echo "=========================================="
echo "üéâ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo "=========================================="
print_status "OK" "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
print_status "INFO" "Backup ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: $BACKUP_DIR"
print_status "INFO" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs: docker-compose -f docker-compose.production.yml logs"

echo ""
echo "üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:"
echo "1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
echo "2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ"
echo "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
echo "4. ‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"
