#!/bin/bash

# ========================================
# System Requirements Check Script
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production Deployment
# ========================================

set -e

echo "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    print_status "WARN" "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ root user - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production"
fi

# Check OS
echo ""
echo "üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£..."
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    print_status "OK" "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: Linux"
    
    # Check if it's Debian/Ubuntu
    if [ -f /etc/debian_version ]; then
        DEBIAN_VERSION=$(cat /etc/debian_version)
        print_status "OK" "Debian/Ubuntu version: $DEBIAN_VERSION"
    else
        print_status "WARN" "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Debian/Ubuntu - ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß"
    fi
else
    print_status "ERROR" "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Linux"
    exit 1
fi

# Check available disk space
echo ""
echo "üíæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå..."
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    print_status "OK" "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠: $((100-DISK_USAGE))%"
else
    print_status "WARN" "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢: $((100-DISK_USAGE))%"
fi

# Check available memory
echo ""
echo "üß† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥..."
TOTAL_MEM=$(free -m | awk 'NR==2{print $2}')
AVAIL_MEM=$(free -m | awk 'NR==2{print $7}')
if [ "$TOTAL_MEM" -ge 2048 ]; then
    print_status "OK" "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${TOTAL_MEM}MB, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${AVAIL_MEM}MB"
else
    print_status "WARN" "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2GB: ${TOTAL_MEM}MB"
fi

# Check Docker installation
echo ""
echo "üê≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker..."
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    print_status "OK" "Docker version: $DOCKER_VERSION"
    
    # Check Docker Compose
    if command -v docker-compose &> /dev/null; then
        COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
        print_status "OK" "Docker Compose version: $COMPOSE_VERSION"
    else
        print_status "ERROR" "Docker Compose ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        exit 1
    fi
    
    # Check if Docker daemon is running
    if docker info &> /dev/null; then
        print_status "OK" "Docker daemon ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    else
        print_status "ERROR" "Docker daemon ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        exit 1
    fi
else
    print_status "ERROR" "Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    exit 1
fi

# Check required ports
echo ""
echo "üîå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ports ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
REQUIRED_PORTS=(80 443 3000 4000 5432 6379)
for port in "${REQUIRED_PORTS[@]}"; do
    if netstat -tuln | grep -q ":$port "; then
        print_status "WARN" "Port $port ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
    else
        print_status "OK" "Port $port ‡∏ß‡πà‡∏≤‡∏á"
    fi
done

# Check firewall status
echo ""
echo "üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firewall..."
if command -v ufw &> /dev/null; then
    UFW_STATUS=$(ufw status | head -1)
    if [[ "$UFW_STATUS" == *"active"* ]]; then
        print_status "INFO" "UFW Firewall ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"
        print_status "INFO" "‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î ports: 80, 443, 22"
    else
        print_status "WARN" "UFW Firewall ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î"
    fi
else
    print_status "INFO" "UFW ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö iptables ‡∏´‡∏£‡∏∑‡∏≠ firewall ‡∏≠‡∏∑‡πà‡∏ô"
fi

# Check system updates
echo ""
echo "üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö..."
if command -v apt &> /dev/null; then
    UPDATES=$(apt list --upgradable 2>/dev/null | wc -l)
    if [ "$UPDATES" -gt 1 ]; then
        print_status "WARN" "‡∏°‡∏µ $((UPDATES-1)) packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï"
        print_status "INFO" "‡∏£‡∏±‡∏ô: sudo apt update && sudo apt upgrade"
    else
        print_status "OK" "‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"
    fi
fi

# Check required directories
echo ""
echo "üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö directories ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
REQUIRED_DIRS=("./uploads" "./backups" "./logs" "./ssl")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        print_status "OK" "Directory $dir ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    else
        print_status "INFO" "‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á directory $dir"
        mkdir -p "$dir"
    fi
done

# Check .env file
echo ""
echo "‚öôÔ∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Configuration..."
if [ -f ".env" ]; then
    print_status "OK" "‡πÑ‡∏ü‡∏•‡πå .env ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    
    # Check required environment variables
    REQUIRED_VARS=("DB_PASSWORD" "JWT_SECRET" "SESSION_SECRET" "SERVER_IP")
    for var in "${REQUIRED_VARS[@]}"; do
        if grep -q "^${var}=" .env && ! grep -q "^${var}=CHANGE_THIS" .env; then
            print_status "OK" "Environment variable $var ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
        else
            print_status "ERROR" "Environment variable $var ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default"
        fi
    done
else
    print_status "ERROR" "‡πÑ‡∏ü‡∏•‡πå .env ‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å env.production.template"
    exit 1
fi

# Final summary
echo ""
echo "=========================================="
echo "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
echo "=========================================="

if [ "$DISK_USAGE" -lt 80 ] && [ "$TOTAL_MEM" -ge 2048 ] && [ -f ".env" ]; then
    print_status "OK" "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production Deployment!"
    echo ""
    echo "üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:"
    echo "1. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
    echo "2. ‡∏£‡∏±‡∏ô: ./deploy.sh"
    echo "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ./scripts/health-check.sh"
else
    print_status "ERROR" "‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô"
    exit 1
fi
