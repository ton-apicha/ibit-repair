#!/bin/bash

# ========================================
# Manual Backup Script for iBit Repair System
# ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Ç‡∏≠‡∏á database ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
# ========================================

set -e

echo "üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Ç‡∏≠‡∏á iBit Repair System..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

# Check if running in correct directory
if [ ! -f "docker-compose.production.yml" ]; then
    print_status "ERROR" "‡πÑ‡∏°‡πà‡∏û‡∏ö docker-compose.production.yml - ‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å root directory ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
    exit 1
fi

# Create backup directory
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="backups/manual_${TIMESTAMP}"
mkdir -p "$BACKUP_DIR"

print_status "INFO" "‡∏™‡∏£‡πâ‡∏≤‡∏á backup directory: $BACKUP_DIR"

# Check if services are running
if ! docker-compose -f docker-compose.production.yml ps | grep -q "Up"; then
    print_status "WARN" "Services ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡πÄ‡∏£‡∏¥‡πà‡∏° services ‡∏Å‡πà‡∏≠‡∏ô..."
    docker-compose -f docker-compose.production.yml up -d
    sleep 10
fi

# Backup database
print_status "INFO" "Backup database..."
DB_BACKUP_FILE="$BACKUP_DIR/database_backup_${TIMESTAMP}.sql"
docker-compose -f docker-compose.production.yml exec -T postgres pg_dump -U ibit_user ibit_repair > "$DB_BACKUP_FILE"

# Compress database backup
gzip "$DB_BACKUP_FILE"
print_status "OK" "Database backup: ${DB_BACKUP_FILE}.gz"

# Backup uploads directory
if [ -d "uploads" ] && [ "$(ls -A uploads)" ]; then
    print_status "INFO" "Backup uploads..."
    tar -czf "$BACKUP_DIR/uploads_backup_${TIMESTAMP}.tar.gz" uploads/
    print_status "OK" "Uploads backup: uploads_backup_${TIMESTAMP}.tar.gz"
else
    print_status "INFO" "‡πÑ‡∏°‡πà‡∏°‡∏µ uploads ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á backup"
fi

# Backup configuration files
print_status "INFO" "Backup configuration..."
cp .env "$BACKUP_DIR/"
cp docker-compose.production.yml "$BACKUP_DIR/"

# Backup logs (last 7 days)
if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
    print_status "INFO" "Backup logs (7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)..."
    find logs -name "*.log" -mtime -7 -exec tar -czf "$BACKUP_DIR/logs_backup_${TIMESTAMP}.tar.gz" {} +
    print_status "OK" "Logs backup: logs_backup_${TIMESTAMP}.tar.gz"
fi

# Create backup info file
cat > "$BACKUP_DIR/backup_info.txt" << EOF
iBit Repair System Backup
========================
Backup Date: $(date)
Backup Type: Manual
System Version: $(git describe --tags --always 2>/dev/null || echo "Unknown")

Contents:
- Database backup (SQL dump)
- Uploads directory
- Configuration files
- Recent logs (7 days)

To restore:
1. Extract this backup
2. Restore database: gunzip -c database_backup_*.sql.gz | docker-compose exec -T postgres psql -U ibit_user -d ibit_repair
3. Restore uploads: tar -xzf uploads_backup_*.tar.gz
4. Update configuration files
EOF

print_status "OK" "Backup info: backup_info.txt"

# Calculate backup size
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
print_status "OK" "‡∏Ç‡∏ô‡∏≤‡∏î backup: $BACKUP_SIZE"

# Clean up old backups (keep last 10 manual backups)
print_status "INFO" "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î backup ‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)..."
cd backups
ls -t manual_* 2>/dev/null | tail -n +11 | xargs -r rm -rf
cd ..

# Final summary
echo ""
echo "=========================================="
echo "üéâ Backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo "=========================================="
print_status "OK" "Backup ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: $BACKUP_DIR"
print_status "INFO" "‡∏Ç‡∏ô‡∏≤‡∏î: $BACKUP_SIZE"

echo ""
echo "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• backup:"
echo "- Database: ${DB_BACKUP_FILE}.gz"
if [ -f "$BACKUP_DIR/uploads_backup_${TIMESTAMP}.tar.gz" ]; then
    echo "- Uploads: uploads_backup_${TIMESTAMP}.tar.gz"
fi
if [ -f "$BACKUP_DIR/logs_backup_${TIMESTAMP}.tar.gz" ]; then
    echo "- Logs: logs_backup_${TIMESTAMP}.tar.gz"
fi
echo "- Config: .env, docker-compose.production.yml"
echo "- Info: backup_info.txt"

echo ""
echo "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:"
echo "1. ‡πÄ‡∏Å‡πá‡∏ö backup ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
echo "2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö restore ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
echo "3. Backup ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏ï‡∏±‡πâ‡∏á cron job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö script ‡∏ô‡∏µ‡πâ"
